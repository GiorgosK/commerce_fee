<?php

/**
 * @file
 * Provides a UI for managing fees.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function commerce_fee_theme() {
  return [
    'commerce_fee' => [
      'render element' => 'elements',
    ],
    'commerce_fee_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_commerce_fee().
 */
function commerce_fee_theme_suggestions_commerce_fee(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_fee', $variables);
}

/**
 * Prepares variables for fee templates.
 *
 * Default template: commerce-fee.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_fee(array &$variables) {
  /** @var Drupal\commerce_fee\Entity\FeeInterface $fee */
  $fee = $variables['elements']['#commerce_fee'];

  $variables['fee_entity'] = $fee;
  $variables['fee_url'] = $fee->toUrl();
  $variables['fee'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['fee'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function commerce_fee_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Field\BaseFieldDefinition $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $field_name = $field_definition->getName();
  $entity_type = $field_definition->getTargetEntityTypeId();
  $widget_name = $context['widget']->getPluginId();
  if ($field_name == 'condition_operator' && $entity_type == 'commerce_fee' && $widget_name == 'options_buttons') {
    // Hide the label.
    $element['#title_display'] = 'invisible';
  }
}
